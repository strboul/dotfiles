#!/usr/bin/env bash

# A CLI to easily clean all Docker resources per type
#
# Usage:
# docker-remove-all -t [containers|images|volumes|networks] -y
#
# It's possible to pass multiple arguments,
# docker-remove-all -t containers -t images -y
#
# If no argument provided, it'll remove all.
#

set -e

source "$HOME"/dotfiles/zsh/utils.sh

utils__stop_if_not_command_exists "docker"

# ----- utils -----------------------------------------------------------------

message_info() {
  utils__message__color_message "purple" ">>> $1"
}

count_lines() {
  echo "$1" | wc -l
}

skip_first_line() {
  awk '{ if (NR > 1) { if (NF > 0) { print $0 } } }'
}

find_type() {
  local name="$1"
  local arr=("${@:2}")
  if [ -z "${arr[*]}" ]; then
    utils__log__error "no $name found. Skipping."
    exit 1
  fi
}

ask_prompt() {
  local name="$1"
  local fun="$2"
  local subfun="$3"
  local arr=("${@:4}")
  local cmd
  local arr_clear
  arr_clear="$(echo "${arr[@]}" | skip_first_line)"
  find_type "$name" "${arr_clear[@]}"
  message_info "$name to be removed:" && echo "${arr[@]}"
  cmd=("$fun" "$subfun" "$name" "${arr_clear[@]}")
  if [ "$noprompt" == true ]; then
    "${cmd[@]}"
  else
    prompt="$(utils__yesno_prompt "Are you sure")"
    if [ "$prompt" == "y" ]; then
      "${cmd[@]}"
    fi
  fi
}

do_remove() {
  local fun="$1"
  local input_name="$2"
  local input=("${@:3})")
  local input_ids
  input_ids="$(echo "${input[@]}" | awk '{ print $3 }' | uniq)"
  "$fun" "${input_ids[@]}"
  utils__log__success \
    "removed $(count_lines "$input_ids") unique $input_name id(s)"
}

# ----- get -------------------------------------------------------------------

# TODO move skip_first_line somewhere else
get_images() {
  docker images
}

get_containers() {
  docker ps -a
}

get_volumes() {
  docker volume ls -f dangling=true
}

get_networks() {
  docker network ls | awk '$2 != "bridge" && $3 == "bridge" { print $1 }'
}

# ----- remove ----------------------------------------------------------------

# TODO can local arr= be removed?
remove_images() {
  local arr=("${@}")
  docker rmi -f "${arr[@]}"
}

remove_containers() {
  local arr=("${@}")
  docker rm -f "${arr[@]}"
}

remove_volumes() {
  local arr=("${@}")
  docker volume rm "${arr[@]}"
}

remove_networks() {
  local arr=("${@}")
  docker network rm "${arr[@]}"
}

# ----- main ------------------------------------------------------------------

# TODO main can be functionalized
main_images() {
  local img
  img="$(get_images)"
  ask_prompt "images" do_remove remove_images "${img[@]}"
}

main_containers() {
  local cont
  cont="$(get_containers)"
  ask_prompt "containers" do_remove remove_containers "${cont[@]}"
}

main_volumes() {
  local vol
  vol="$(get_volumes)"
  ask_prompt "volumes" do_remove remove_volumes "${vol[@]}"
}

main_networks() {
  local net
  net="$(get_networks)"
  ask_prompt "volumes" do_remove remove_networks "${vol[@]}"
}

# ----- CLI -------------------------------------------------------------------

usage() {
  cat <<EOM
Usage: $(basename "$0") [OPTIONS...]

  -t  [containers|images|volumes|networks]  Optional. removal type of description
                                            If empty, all types are removed.
  -y                                        don't ask prompt
  -h                                        display help
EOM
  exit 2
}

noprompt=false

while getopts ":t:h:y" opt; do
  case "$opt" in
    t) types+=("$OPTARG") ;;
    y) noprompt=true ;;
    h|*) usage ;;
  esac
done

shift $((OPTIND - 1))

if [ "${#types[@]}" -eq 0 ]; then
  types=("containers" "images" "volumes" "networks")
fi

for val in "${types[@]}"; do
  if [ "$val" == "containers" ]; then main_containers; fi
  if [ "$val" == "images" ]; then main_images; fi
  if [ "$val" == "volumes" ]; then main_volumes; fi
  if [ "$val" == "networks" ]; then main_networks; fi
done
